Function invoke-AzCISAudit {

    <#  
    
    .DESCRIPTION
    A rough and ready script that performs a number of the CIS Benchmark checks against the target Azure tenancy, will cycle through all subscriptions and dump out CSV files
     of the results to both the screen and into the current working directory. The idea is to them copy the CSV files into your report either from Excel or using the convert text to 
     table function in Word. This will give you a complete table for each section of the CIS benchark which you can run through and fill in any gaps. Some pointers are given for checks
     which are not covered by the script.

     Will also export and download the Secure Score recomentations CSV file for each subscription on the tennant.

    NOTE: Requires the Azure powershell Module to be installed
    install-module az

    to get current tennant ID run get-azcontext

    Dec 2021 - Updated to Benchmark 1.4.0

    .PARAMETER TenantId
    Tenant ID of Account to Review

    .Example
    invoke-AzCISAudit -TenantId 233b7362-624a-4a31-9a1f-d340c21da1e0
    
    #>
    [cmdletbinding()]
    Param
    (
        [Parameter(
            Position = 0,
            Mandatory = $true,
            ValueFromPipeline = $true,
            ValueFromPipelineByPropertyName = $true,
            HelpMessage = 'Tenant ID of Account to Review'
        )]
        [ValidateNotNullorEmpty()]
        [Alias('t')]
        [string]$TenantId
    )

    # log in
    Connect-AzAccount -Tenant $TenantId -DeviceCode
    
    $currentAzureContext = Get-AzContext
    $azureRmProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile;
    $profileClient = New-Object Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient($azureRmProfile);
    $AccessToken = $profileClient.AcquireAccessToken($currentAzureContext.Subscription.TenantId).AccessToken;
    #$subscriptionID = ([regex]::match((Get-AzContext).Name, "\s\((.*)\)\s")).Groups[1].value

    $subscriptions = Get-AzSubscription -TenantId $TenantId

    #$apiVersion = "2019-06-01"
    $apiVersion = "2018-06-01"

    $headers = @{
        'Authorization' = "Bearer $AccessToken"
        'Content-Type' = 'application/json'
    }
    

    Write-host "1 Identity and Access Management"
    $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
    $csv += "1.1,1,Ensure that 'Multi-Factor Auth Status' is 'Enabled' for all Privileged Users ,Manual Check,"
    #if (Get-MsolUser -All | where {$_.StrongAuthenticationMethods.Count -eq 0} | Select-Object -Property UserPrincipalName) {$result = "FAIL"} else {$result = "PASS"}
    $csv += "1.2,2,Ensure that 'Multi-Factor Auth Status' is 'Enabled' for all Non-Privileged Users,Manual Check,"
    
    $guests = Get-AzADUser | where { $_.UserPrincipalName -match ".*#EXT#.*" }
    if ($guests) {
        $csv += "1.3,1,Ensure that guest users are reviewed on a monthly basis,$($($guests | Measure-Object).Count) Guests users exist,INFO"
    } else {
        $csv += "1.3,1,Ensure that guest users are reviewed on a monthly basis,,PASS"
    }

    $csv += "1.4,2,Ensure that 'Restore multi-factor authentication on all remembered devices' is Enabled',Manual Check,"
    $csv += "1.5,1,Ensure that 'Number of methods required to reset' is set to '2',Manual Check,"
    $csv += "1.6,1,Ensure that 'Number of days before users are asked to re-confirm their authentication information' is not set to 0,Manual Check,"
    $csv += "1.7,1,Ensure that 'Notify users on password resets?' is set to 'Yes',Manual Check,"
    $csv += "1.8,2,Ensure that 'Notify all admins when other admins reset their password?' is set to 'Yes',Manual Check,"
    $csv += "1.9,2,Ensure that 'Users can consent to apps accessing company data on their behalf' is set to 'No',https://portal.azure.com/#blade/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/UserSettings,"
    $csv += "1.10,2,Ensure that 'Users can add gallery apps to their Access Panel' is set to 'No',Manual Check,"
    $csv += "1.11,2,Ensure that 'Users can register applications' is set to 'No',Manual Check,https://portal.azure.com/#blade/Microsoft_AAD_IAM/UsersManagementMenuBlade/UserSettings"
    $csv += "1.12,2,Ensure That 'Guest users access restrictions' is set to 'Guest user access is restricted to properties and memberships of their own directory objects',Manual Check,https://portal.azure.com/#blade/Microsoft_AAD_IAM/UsersManagementMenuBlade/UserSettings" # Get-AzureADMSAuthorizationPolicy
    $csv += "1.13,2,Ensure that 'Guest invite restrictions' is set to 'Only users assigned to specific admin roles can invite guest users',Manual Check,"
    
    $csv += "1.14,1,Ensure That 'Restrict access to Azure AD administration portal' is Set to 'Yes' ,Manual Check,"
    $csv += "1.15,2,Ensure that 'Restrict user ability to access groups features in the Access Pane' is set to 'Yes',Manual Check,https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupsManagementMenuBlade/General"
    $csv += "1.16,2,Ensure that 'Users can create security groups in Azure portals, API or PowerShell' is set to 'No',Manual Check,"
    $csv += "1.17,2,Ensure that 'Owners can manage group membership requests in the Access Panel' is set to 'No',Manual Check,"
    $csv += "1.18,2,Ensure that 'Users can create Microsoft 365 groups in Azure portals, API or PowerShell' is set to 'No',Manual Check,"
    $csv += "1.19,1,Ensure that 'Require Multi-Factor Authentication to register or join devices with Azure AD' is set to 'Yes' ,Manual Check,https://portal.azure.com/#blade/Microsoft_AAD_Devices/DevicesMenuBlade/DeviceSettings/menuId/"
    $customRoles = Get-AzRoleDefinition | where { $_.isCustom -eq "True" }
    if ( $customRoles ) {
        $csv += '1.20,2,Ensure that no custom subscription owner roles are created, Custom roles found - check role definition - Get-AzRoleDefinition | where { $_.isCustom -eq "True" }, Manual check'
    } else {
        $csv += '1.20,2,Ensure that no custom subscription owner roles are created,No Custom Roles Found,PASS'

    }
    $csv += "1.21,1,Ensure Security Defaults is enabled on Azure Active Directory,Manual Check,https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Properties"
    if ( $customRoles ) {
        $csv += "1.22,2,Ensure Custom Role is assigned for Administering Resource Locks,Manual Check - custom roles found,"
    } else {
        $csv += "1.22,2,Ensure Custom Role is assigned for Administering Resource Locks,No custom Roles Found,FAIL"
    }

    
    Out-File -FilePath "1 Identity and Access Management.csv" -InputObject $csv

    # run rest of the checks for every subscription
    foreach ($subscription in $subscriptions) {

        $subscriptionID = $subscription.Id
        $subscriptionName = $subscription.Name

        Set-AzContext -SubscriptionId $subscriptionID

        write-host $subscriptionName
        
        Write-host "2. Microsoft Defender for Cloud"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")

        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "VirtualMachines" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.1,2,Ensure that Microsoft Defender is set to On for Servers,,$result"

        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "AppServices" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.2,2,Ensure that Microsoft Defender is set to On for App Service,,$result"
        
        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "SqlServers" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.3,2,Ensure that Microsoft Defender is set to On for Azure SQL database,,$result"

        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "SqlServerVirtualMachines" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.4,2,Ensure that Microsoft Defender is set to On for SQL Servers on machines,,$result"

        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "StorageAccounts" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.5,2,Ensure that Microsoft Defender is set to On for Storage,,$result"

        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "KubernetesService" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.6,2,Ensure that Microsoft Defender is set to On for Kubernetes,,$result"

        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "ContainerRegistry" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.7,2,Ensure that Microsoft Defender is set to On for Container Registries,,$result"
        
        if (Get-AzSecurityPricing | Where-Object { $_.Name -eq "KeyVaults" } | where { $_.PricingTier -eq "Free" }) { $result = "FAIL" } else {  $result = "PASS" }
        $csv += "2.8,2,Ensure that Microsoft Defender is set to On for Key Vault,,$result"
        
        $resp = Invoke-RestMethod -uri "https://management.azure.com/subscriptions/$subscriptionID/providers/Microsoft.Security/settings/WDATP?api-version=2019-01-01" -Headers $headers
        if ($resp.properties.enabled -eq "True") {$result = "PASS"} else {$result = "FAIL"}
        $csv += "2.9,2,Ensure that Microsoft Defender for Endpoint (WDATP) integration with Microsoft Defender for Cloud is selected,,$result"

        $resp = Invoke-RestMethod -uri "https://management.azure.com/subscriptions/$subscriptionID/providers/Microsoft.Security/settings/MCAS?api-version=2019-01-01" -Headers $headers
        if ($resp.properties.enabled -eq "True") {$result = "PASS"} else {$result = "FAIL"}
        $csv += "2.10,2,Ensure that Microsoft Defender for Cloud Apps (MCAS) Integration with Microsoft Defender for Cloud is Selected,,$result"
                
        #$resp = Invoke-RestMethod -uri "https://management.azure.com/subscriptions/$subscriptionID/providers/Microsoft.Security/autoProvisioningSettings?api-version=2019-01-01" -Headers $headers
        #if ($resp.Value.properties.autoProvision -eq "Off") {$result = "FAIL"} else {$result = "PASS"}
        if ( $(Get-AzSecurityAutoProvisioningSetting).AutoProvision -eq "Off" ) {$result = "FAIL"} else {$result = "PASS"}
        $csv += "2.11,1,Ensure That Auto provisioning of 'Log Analytics agent for Azure VMs' is Set to 'On',,$result"
              
        #Old Checks
        #$resp = Invoke-RestMethod -uri "https://management.azure.com/subscriptions/$subscriptionID/providers/Microsoft.Security/pricings?api-version=$apiVersion" -Headers $headers
        #if ($resp.Value.properties.pricingTier -contains "Standard") {$result = "PASS"} else {$result = "FAIL"}
        #$csv += @("2.1,2,Ensure that standard pricing tier is selected,,$result")      
        
        $result = "PASS"
        $resp = Invoke-RestMethod -uri "https://management.azure.com/subscriptions/$subscriptionID/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2019-01-01" -Headers $headers
        if (!$resp.properties.parameters.systemUpdatesMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.systemUpdatesMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.systemConfigurationsMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.systemConfigurationsMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.endpointProtectionMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.endpointProtectionMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.diskEncryptionMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.diskEncryptionMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.networkSecurityGroupsMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.networkSecurityGroupsMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.webApplicationFirewallMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.webApplicationFirewallMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.nextGenerationFirewallMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.nextGenerationFirewallMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.vulnerabilityAssesmentMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.vulnerabilityAssesmentMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.storageEncryptionMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.storageEncryptionMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.jitNetworkAccessMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.jitNetworkAccessMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.adaptiveApplicationControlsMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.adaptiveApplicationControlsMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.sqlAuditingMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.sqlAuditingMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        if (!$resp.properties.parameters.sqlEncryptionMonitoringEffect.value) {$result = "FAIL"} elseif ($resp.properties.parameters.sqlEncryptionMonitoringEffect.value -eq "DISABLED") {$result = "FAIL"}
        
        $csv += @("2.12,1,Ensure any of the ASC Default policy setting is not set to 'Disabled',,$result")
        

        
        $resp = Invoke-RestMethod -uri "https://management.azure.com/subscriptions/$subscriptionID/providers/Microsoft.Security/securityContacts?api-version=2017-08-01-preview" -Headers $headers
        if (!$resp.value.properties.email) {$result = "FAIL"} elseif ($resp.properties.email -eq "DISABLED") {$result = "FAIL"} else {$result = "PASS"}
        $csv += @("2.13,1,Ensure 'Additional email addresses' is configured with a security contact email,,$result")
        #not disabled or empty
         
        if ($resp.value.properties.alertNotifications -eq "On") {$result = "PASS"} else {$result = "FAIL"}
        $csv += @("2.14,1,Ensure that 'Notify about alerts with the following severity' is set to 'High',,$result")

        if ($resp.value.properties.alertsToAdmins -eq "On") {$result = "PASS"} else {$result = "FAIL"}
        $csv += @("2.15,1,Ensure that 'All users with the following roles' is set to 'Owner',,$result")
                
        #if (!$resp.properties.phone) {$result = "FAIL"} else {$result = "PASS"}
        #$csv += @("2.17,1,Ensure that security contact 'Phone number' is set,,$result")
        ##Ensure the output of the below command is set not empty, and is set with appropriate
        ##phone number  
        
        #$csv
        Out-File -FilePath "2 Microsoft Defender - $($subscriptionName).csv" -InputObject $csv
        
        
        
        
        write-host "3. Storage Accounts"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")

        if (!$(Get-AzStorageAccount)) {

            write-host "No Storage Accounts exist in subscription"
            # No storage accounts exist
            $csv += "3.1,1,Ensure that 'Secure transfer required' is set to 'Enabled',N/A,INFO"
            $csv += "3.2,1,Ensure that storage account access keys are periodically regenerated,N/A,INFO"
            $csv += "3.3,2,Ensure Storage logging is enabled for Queue service for read write and delete requests,N/A,INFO"
            $csv += "3.4,1,Ensure that shared access signature tokens expire within an hour,N/A,INFO"
            $csv += "3.5,1,Ensure that 'Public access level' is set to Private for blob containers,Scout,INFO"
            $csv += "3.6,2,Ensure default network access rule for Storage Accounts is set to deny,N/A,INFO"
            $csv += "3.7,2,Ensure 'Trusted Microsoft Services' is enabled for Storage Account access,N/A,INFO"
            $csv += "3.8,1,Ensure soft delete is enabled for Azure Storage,N/A,INFO"
            $csv += "3.9,2,Ensure storage for critical data are encrypted with Customer Managed Keys,N/A,INFO"
            $csv += "3.10,2,Ensure Storage logging is enabled for Blob service for read write and delete requests,N/A,INFO"
            $csv += "3.11,2,Ensure Storage logging is enabled for Table service for read write and delete requests,N/A,INFO"
            $csv += "3.12,2,Ensure the 'Minimum TLS version' is set to 'Version 1.2',N/A,INFO"

        } else {

            $storageaccounts = Get-AzStorageAccount | where {$_.EnableHttpsTrafficOnly -eq $false}
            if ($storageaccounts) {
                $csv += "3.1,1,Ensure that 'Secure transfer required' is set to 'Enabled',the following Accounts do not enforce secure transfer: $($($storageaccounts).StorageAccountName),FAIL"
            } else {
                $csv += "3.1,1,Ensure that 'Secure transfer required' is set to 'Enabled',,PASS"
            }
            
            
            $csv += "3.2,1,Ensure that storage account access keys are periodically regenerated,Scout,"
            $csv += "3.3,2,Ensure Storage logging is enabled for Queue service for read write and delete requests,Manual Check,az storage account list | grep name;az storage logging show --services q --account-name <storageAccountName> ( delete read and write set to true)"
            $csv += "3.4,1,Ensure that shared access signature tokens expire within an hour,Manual Check,"
            if (Get-AzStorageAccount | where {$_.kind -eq "BlobStorage" }) {
                $csv += "3.5,1,Ensure that 'Public access level' is set to Private for blob containers,Scout,"
            } else {
                $csv += "3.5,1,Ensure that 'Public access level' is set to Private for blob containers,No Blob Storage Containers Found,PASS"
            }
            
            $storageaccounts = Get-AzStorageAccount | Get-AzStorageAccountNetworkRuleSet | where { $_.DefaultAction -eq "Allow" }
            if ($storageaccounts) { 
                $csv += "3.6,2,Ensure default network access rule for Storage Accounts is set to deny,Check Scout (Storage Accounts Allowing Public Traffic) for list of accounts,FAIL"
            } else {
                $csv += "3.6,2,Ensure default network access rule for Storage Accounts is set to deny,,PASS"

            }
            
            $csv += "3.7,2,Ensure 'Trusted Microsoft Services' is enabled for Storage Account access,Scout,"
            #Get-AzStorageAccount | Get-AzStorageAccountNetworkRuleSet ## if defualtAction is allow this is N/A neds further testing
            
            $failingaccounts = Get-AzStorageAccount | Get-AzStorageBlobServiceProperty | where { $_.DeleteRetentionPolicy.Enabled -eq $false }
            if ( $failingaccounts) {
                $csv += "3.8,1,Ensure soft delete is enabled for Azure Storage,The following accounts do not have soft delete enabled $($failing.StorageAccountName),FAIL"
            } else {
                $csv += "3.8,1,Ensure soft delete is enabled for Azure Storage,,Manual Check"
            }
            $csv += "3.9,2,Ensure storage for critical data are encrypted with Customer Managed Keys,Manual Check,"
            $csv += "3.10,2,Ensure Storage logging is enabled for Blob service for read write and delete requests,Manual Check,"
            $csv += "3.11,2,Ensure Storage logging is enabled for Table service for read write and delete requests,Manual Check,"
            $failingaccounts = Get-AzStorageAccount | where { $_.MinimumTlsVersion -ne "TLS1_2" }
            if ($failingaccounts ) {
                $csv += "3.12,2,Ensure the 'Minimum TLS version' is set to 'Version 1.2',The following accounts so not have minimun TLS version set to 1.2: $($failingaccounts.StorageAccountName),FAIL"
            } else {
                $csv += "3.12,2,Ensure the 'Minimum TLS version' is set to 'Version 1.2',,PASS"
            }

        }
        
        #$csv
        Out-File -FilePath "3 Storage Accounts - $($subscriptionName).csv" -InputObject $csv


        write-host "4. Database Services"
        write-host "4.1 SQL Server - Auditing"

        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")

        if (!$(Get-AzSqlServer)) {

            # no sql servers in use
            $csv += "4.1.1,1,Ensure that 'Auditing' is set to 'On',N/A,INFO"
            $csv += "4.1.2,1,Ensure that 'Data encryption' is set to 'On' on a SQL Database,N/A,INFO"
            $csv += "4.1.3,1,Ensure that 'Auditing' Retention is 'greater than 90 days',N/A,INFO"

        } else {

            if (Get-AzSqlServer | Get-AzSqlServerAudit | where { $_.BlobStorageTargetState -eq "Disabled" -and $_.EventHubTargetState -eq "Disabled" -and $_.EventHubTargetState -eq "Disabled" }) {
                $csv += "4.1.1,1,Ensure that 'Auditing' is set to 'On',Not all SQL Servers have Auditing enabled,FAIL"
            } else {
                $csv += "4.1.1,1,Ensure that 'Auditing' is set to 'On',,PASS"
            }
            
            $sqldatabases = Get-AzSqlServer | Get-AzSqlDatabase | Get-AzSqlDatabaseTransparentDataEncryption | where { $_.state -eq "Disabled" }
            if ($sqldatabases) {
                $csv += "4.1.2,1,Ensure that 'Data encryption' is set to 'On' on a SQL Database, The Following Servers contain unencrypted Databases: $($sqldatabases.ServerName),FAIL"
            } else {
                $csv += "4.1.2,1,Ensure that 'Data encryption' is set to 'On' on a SQL Database,,PASS"
            }

            if ( Get-AzSqlServer | Get-AzSqlServerAudit | where { $_.BlobStorageTargetState -eq "Enabled" } ) {
                if (Get-AzSqlServer | Get-AzSqlServerAudit | where { $_.BlobStorageTargetState -eq "Enabled" } | where { $_.RetentionInDays -lt 90 }) {
                    $csv += "4.1.3,1,Ensure that 'Auditing' Retention is 'greater than 90 days',,FAIL"
                } else {
                    $csv += "4.1.3,1,Ensure that 'Auditing' Retention is 'greater than 90 days',,PASS"
                }
            } else {
                $csv += "4.1.3,1,Ensure that 'Auditing' Retention is 'greater than 90 days',Auditing is not enabled,FAIL"
            }
            
        }
              
        Out-File -FilePath "41 SQL Server - Auditing - $($subscriptionName).csv" -InputObject $csv

        
        
        
        
        
        write-host "4.2 SQL Server - Azure Defender for SQL"

        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")

        if (!$(Get-AzSqlServer)) {

            # no sql servers in use
            $csv += "4.2.1,2,Ensure that Advanced Threat Protection (ATP) on a SQL server is set to 'Enabled',N/A,INFO"
            $csv += "4.2.2,2,Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account,N/A,INFO"
            $csv += "4.2.3,2,Ensure that VA setting Periodic Recurring Scans is enabled on a SQL server,N/A,INFO"
            $csv += "4.2.4,2,Ensure that VA setting Send scan reports to is configured for a SQL server,N/A,INFO"
            $csv += "4.2.5,2,Ensure that VA Setting 'Also send email notifications to admins and subscription owners' is set for a SQL server,N/A,INFO"


        } else {

            $results = get-azsqlserver | Get-AzSqlServerAdvancedThreatProtectionSetting | where { $_.ThreatDetectionState -eq "Disabled" }
            if ( $results ) {
                $csv += "4.2.1,2,Ensure that Advanced Threat Protection (ATP) on a SQL server is set to 'Enabled',The following Servers have ATP disabled: $($results.ServerName),FAIL"
            } else {
                $csv += "4.2.1,2,Ensure that Advanced Threat Protection (ATP) on a SQL server is set to 'Enabled',,PASS"
            }
            
            
            $results = get-azsqlserver | Get-AzSqlServerVulnerabilityAssessmentSetting | where { $_.StorageAccountName -eq "" }
            if ($results) {
                $csv += "4.2.2,2,Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account,The following Servers have VA disabled: $($results.ServerName),FAIL"
            } else {
                $csv += "4.2.2,2,Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account,,PASS"
            }

            
            $results = get-azsqlserver | Get-AzSqlServerVulnerabilityAssessmentSetting | where { $_.RecurringScansInterval -eq "None" }
            if ($results) {
                $csv += "4.2.3,2,Ensure that VA setting Periodic Recurring Scans is enabled on a SQL server,The following Servers have VA disabled: $($results.ServerName),FAIL"
            } else {
                $csv += "4.2.3,2,Ensure that VA setting Periodic Recurring Scans is enabled on a SQL server,,PASS"
            }

            $results = get-azsqlserver | Get-AzSqlServerVulnerabilityAssessmentSetting | where { !$_.NotificationEmail }
            if ($results) {
                $csv += "4.2.4,2,Ensure that VA setting Send scan reports to is configured for a SQL server,The following Servers have Email reports disabled: $($results.ServerName),FAIL"
            } else {
                $csv += "4.2.4,2,Ensure that VA setting Send scan reports to is configured for a SQL server,,PASS"
            }

            $results = get-azsqlserver | Get-AzSqlServerVulnerabilityAssessmentSetting | where { $_.EmailAdmins -eq $false }
            if ($results) {
                $csv += "4.2.5,2,Ensure that VA Setting 'Also send email notifications to admins and subscription owners' is set for a SQL server,The following Servers do not have admin notifications enabled: $($results.ServerName),FAIL"
            } else {
                $csv += "4.2.5,2,Ensure that VA Setting 'Also send email notifications to admins and subscription owners' is set for a SQL server,,PASS"
            }
        }
        
        Out-File -FilePath "42 SQL Server - Azure Defender for SQL - $($subscriptionName).csv" -InputObject $csv


        write-host "4.3 PostgreSQL Database Server"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        $csv += "4.3.1,1,Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server,Manual Check,"
        $csv += "4.3.2,1,Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server,Manual Check,"
        $csv += "4.3.3,1,Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server,Manual Check,"
        $csv += "4.3.4,1,Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server,Manual Check,"
        $csv += "4.3.5,1,Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server,Manual Check,"
        $csv += "4.3.6,1,Ensure server parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server,Manual Check,"
        $csv += "4.3.7,1,Ensure 'Allow access to Azure services' for PostgreSQL Database Server is disabled,Manual Check,"
        $csv += "4.3.8,1,Ensure 'Infrastructure double encryption' for PostgreSQL Database Server is 'Enabled' ,Manual Check,"
        Out-File -FilePath "43 PostgreSQL Database Server - $($subscriptionName).csv" -InputObject $csv
        
        write-host "4.4 MySQL Database"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        $csv += "4.4.1,1,Ensure 'Enforce SSL connection' is set to 'Enabled' for Standard MySQL Database Server,Manual Check,"
        $csv += "4.4.2,1,Ensure 'TLS Version' is set to 'TLSV1.2' for MySQL flexible Database Server,Manual Check,"
        Out-File -FilePath "44 MySQL Database - $($subscriptionName).csv" -InputObject $csv
        
        write-host "4.4 MSSQL"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        $results = get-azsqlserver | where { !$_.Administrators }
        if ($results) {
            $csv += "4.5,1,Ensure that Azure Active Directory Admin is configured,The following Servers do not have a an AD admin configured: $($results.ServerName),FAIL"
        } else {
            $csv += "4.5,1,Ensure that Azure Active Directory Admin is configured,,PASS"
        }
        
        $results = Get-AzSqlServer | Get-AzSqlServerTransparentDataEncryptionProtector | where { $_.Type -eq "ServiceManaged" }
        if ($results) {
            $csv += "4.6,2,Ensure SQL server's TDE protector is encrypted with Customer-managed key,The following servers TDE Protector is not encrypted with BYOK: $($results.ServerName),FAIL"
        } else {
            $csv += "4.6,2,Ensure SQL server's TDE protector is encrypted with Customer-managed key,,PASS"
        }
        Out-File -FilePath "456 Database Services - $($subscriptionName).csv" -InputObject $csv
        
        


        write-host "5 Logging and Monitoring"
        write-host "5.1 Configuring Diagnostic Settings"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        
        $diag = $(Get-AzResource).ResourceId | % { Get-AzDiagnosticSetting -ResourceId $_ }
        if (!$diag) {
            $csv += "5.1.1,1,Ensure that a 'Diagnostics Setting' exists,No Diagnostic Settings Exist,FAIL"
        } else {
            $csv += "5.1.1,1,Ensure that a 'Diagnostics Setting' exists,Diagnostic settings are enabled,PASS"
        }
        $csv += "5.1.2,1,Ensure Diagnostic Setting captures appropriate categories,Manual Check,"
        $csv += "5.1.3,1,Ensure the storage container storing the activity logs is not publicly accessible,Get-AzLogProfile - check storgaeaccountid | Get-AzStorageAccount | Get-AzStorageContainer is it public (may require access to keyvault),"
        $csv += "5.1.4,2,Ensure the storage account containing the container with activity logs is encrypted with BYOK (Bring Your Own Key),Manual Check,"
        
        if (!(Get-AzKeyVault)) {$result,$note = "INFO","No Key Vaults in use"} else {$result,$note = "","Key Vault in use Manual Check - az keyvault list / az monitor diagnostic-settings list --resource <id>"}
        $csv += "5.1.5,1,Ensure that logging for Azure KeyVault is 'Enabled',$note,$result"
        
        Out-File -FilePath "51 Configuring Diagnostic Settings - $($subscriptionName).csv" -InputObject $csv



        
        write-host "5.2 Monitoring using Activity Log Alerts"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        if (!(Get-AzResourceGroup | Get-AzAlertRule -WarningAction Ignore)) {$result,$note = "FAIL","No Alert Rules Configured"} else {$result,$note = "","Alert Rules Configured - Manual Check"}
        $csv += "5.2.1,1,Ensure that Activity Log Alert exists for Create Policy Assignment,$note,$result"
        $csv += "5.2.2,1,Ensure that Activity Log Alert exists for Delete Policy Assignment,$note,$result"  
        $csv += "5.2.3,1,Ensure that Activity Log Alert exists for Create or Update Network Security Group,$note,$result"
        $csv += "5.2.4,1,Ensure that Activity Log Alert exists for Delete Network Security Group,$note,$result"
        $csv += "5.2.5,1,Ensure that Activity Log Alert exists for Create or Update Network Security Group Rule,$note,$result"
        $csv += "5.2.6,1,Ensure that activity log alert exists for the Delete Network Security Group Rule,$note,$result"
        $csv += "5.2.7,1,Ensure that Activity Log Alert exists for Create or Update Security Solution,$note,$result"
        $csv += "5.2.8,1,Ensure that Activity Log Alert exists for Delete Security Solution,$note,$result"
        $csv += "5.2.9,1,Ensure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule,$note,$result"
        $csv += "5.3,1,Ensure that Diagnostic Logs are enabled for all services which support it,Manual Check,"
        Out-File -FilePath "52 Monitoring using Activity Log Alerts - $($subscriptionName).csv" -InputObject $csv
        
        
        write-host "6. Networking"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        $csv += "6.1,1,Ensure that RDP access is restricted from the internet,Scout,"
        $csv += "6.2,1,Ensure that SSH access is restricted from the internet,Scout,"
        $csv += "6.3,1,Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP),Scout,"
        
        if (!$(Get-AzNetworkWatcher | Get-AzNetworkWatcherFlowLog)) {
            $csv += "6.4,2,Ensure that Network Security Group Flow Log retention period is 'greater than 90 days',No Flow Logs Configured,FAIL"
        } else {
            $csv += "6.4,2,Ensure that Network Security Group Flow Log retention period is 'greater than 90 days',Manual Check - https://portal.azure.com/#blade/Microsoft_Azure_Network/NetworkWatcherMenuBlade/flowLogs,"
        }
              
        
        $watchers =  Get-AzNetworkWatcher | where { $_.ProvisioningState -eq "Succeeded" }
        if ($watchers) {
            $csv += "6.5,1,Ensure that Network Watcher is 'Enabled',,PASS"
        } else {
            $csv += "6.5,1,Ensure that Network Watcher is 'Enabled',No Active Network Watchers Found,FAIL"
        }
        
        $csv += "6.6,1,Ensure that UDP Services are restricted from the Internet,Scout,"
        $csv
        Out-File -FilePath "6 Networking - $($subscriptionName).csv" -InputObject $csv
        
        

        write-host "7. Virtual Machines"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        
        $results = get-azvm | where { !$_.StorageProfile.OsDisk.ManagedDisk.Id }
        if ($results) {
            $csv += "7.1,1,Ensure Virtual Machines are utilizing Managed Disks, The following VMs are using unmanaged disks: $($results.Name),FAIL"
        } else {
            $csv += "7.1,1,Ensure Virtual Machines are utilizing Managed Disks,,PASS"
        }
        
        $output = @("")
        foreach ($vm in Get-AzVM) {
            $encryption = Get-AzVMDiskEncryptionStatus -ResourceGroupName $vm.ResourceGroupName -VMName $vm.Name
            if ($encryption.OsVolumeEncrypted -eq "NotEncrypted") {
                $output += "VM $($vm.name) in Resource Group $($vm.ResourceGroupName) OS Volume is not encrypted"
                $result = "FAIL"
            if ($encryption.DataVolumesEncrypted -eq "NotEncrypted") {
                $output += "VM $($vm.name) in Resource Group $($vm.ResourceGroupName) Data Volume is not encrypted"
                $result = "FAIL"
            }
            } else {
                $result = "PASS"
            }
        }
        $csv += "7.2,2,Ensure that 'OS and Data' disks are encrypted with Customer Managed Key (CMK),$output,$result"
               
        $results = get-azdisk | where { $_.DiskState -eq "Unattached" } | Where { $_.Encryption.Type -ne "EncryptionAtRestWithPlatformKey" }
        if ($results) {
            $csv += "7.3,1,Ensure that 'Unattached disks' are encrypted with CMK, The following unattached disk are unencrypted: $($results.Name),FAIL"
        } else {
            $csv += "7.3,1,Ensure that 'Unattached disks' are encrypted with CMK,,PASS"
        }
        
        $extensions = $(get-azvm | % { Get-AzVMExtension -VMName $_.Name -ResourceGroupName $_.ResourceGroupName } | Select-Object -ExpandProperty Name) | Sort-Object -Unique
        $csv += "7.4,1,Ensure that only approved extensions are installed,$extensions,INFO"
        
        $csv += "7.5,1,Ensure that the latest OS Patches for all Virtual Machines are applied,Manual Check - Defender > Recommendations > all recomendations > System Updates should be installed,"
        $csv += "7.6,1,Ensure that the endpoint protection for all Virtual Machines is installed,Manual Check - Defender > Recommendations > all recomendations > install Endpoint Protection,"
        $csv += "7.7,2,Ensure that VHD's are encrypted,Manual Check,Scout"
        $csv
        Out-File -FilePath "7 Virtual Machines - $($subscriptionName).csv" -InputObject $csv
        
        
        
        write-host "8. Other Security Considerations"
        $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
        if (!(Get-AzKeyVault)) {$result,$note = "INFO","No Key Vaults in use"} else {$note,$result = "Key Vault in use, Manual Check",""}
        $csv += "8.1,1,Ensure that the Expiration Date is set for all Keys in RBAC Key Vaults,$note,$result"
        $csv += "8.2,1,Ensure that the Expiration Date is set for all Keys in Non-RBAC Key Vaults,$note,$result"
        $csv += "8.3,1,Ensure that the Expiration Date is set for all Secrets in RBAC Key Vaults,$note,$result"
        $csv += "8.3,1,Ensure that the Expiration Date is set for all Secrets in Non-RBAC Key Vaults,$note,$result"
        
        if (!(Get-AzResourceLock)) {$note,$result = "No Resource Lock in use","FAIL"} else {$note,$result = "","PASS"}
        $csv += "8.5,2,Ensure that Resource Locks are set for mission critical Azure resources,$note,$result"
        
        if (!(Get-AzKeyVault)) {$result,$note = "INFO","No Key Vaults in use"} else {$note,$result = "Manual Check","Keyvaults > Keyvault > overview (soft delete and purge protection)"}
        $csv += "8.6,1,Ensure the key vault is recoverable,$note,$result"
        
        $csv += "8.5,1,Enable role-based access control (RBAC) within Azure Kubernetes Services,Manual Check,"
        
        Out-File -FilePath "8 Other Security Considerations - $($subscriptionName).csv" -InputObject $csv
        
        Write-host "Azure Secure Score Recomendations"
        Get-AzAdvisorRecommendation | Select-Object -ExpandProperty ShortDescription  Impact,ImpactedValue,ImpactedField | export-csv -Path "$subscriptionName.csv"
        
    }
    
    write-host "9. App Service"
    $csv =  @("Check,Level,Benchmark,Result,Pass/Fail")
    $csv += "9.1,1,Ensure App Service Authentication is set on Azure App Service,Scout / Manual Check,"

    $http_apps = Get-AzWebApp | where { $_.HttpsOnly -eq $False } | Select-Object Name
    if ($http_apps) {$result,$note = "FAIL","$($($http_apps.Name | Measure-Object).count) App Services do not enforce HTTPS"} else {$result,$note = "PASS",""}
    $csv += "9.2,1,Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service,$note,$result"

    $csv += "9.3,1,Ensure web app is using the latest version of TLS encryption,Scout / Manual Check,"
    
    $client_cert_apps = Get-AzWebApp | where { $_.ClientCertEnabled -eq $False } | Select-Object Name
    if ($client_cert_apps) {$result,$note = "FAIL","$($($client_cert_apps.Name | Measure-Object).count) App Services do not have Client Certificates configured"} else {$result,$note = "PASS",""}
    $csv += "9.4,2,Ensure the web app has 'Client Certificates (Incoming client certificates)' set to 'On',$note,$result"
    
    $csv += "9.5,1,Ensure that Register with Azure Active Directory is enabled on App Service,Scout / Manual Check,"
    $csv += "9.6,1,Ensure that 'PHP version' is the latest if used to run the web app,Scout / Manual Check,"
    $csv += "9.7,1,Ensure that 'Python version' is the latest if used to run the web app,Scout / Manual Check,"
    $csv += "9.8,1,Ensure that 'Java version' is the latest if used to run the web app,Scout / Manual Check,"
    $csv += "9.9,1,Ensure that 'HTTP Version' is the latest if used to run the web app,Scout / Manual Check,"
    $csv += "9.10,1,Ensure FTP deployments are disabled,Manual Check,"
    if (!(Get-AzKeyVault)) {$result,$note = "INFO","No Key Vaults in use"} else {$note,$result = "Key Vaults in use","PASS"}
    $csv += "9.11,2,Ensure Azure Keyvaults are used to store secrets,$note,$result"
    Out-File -FilePath "9 App Service - $($subscriptionName).csv" -InputObject $csv
}
    
